Installating Perl modules for DBIx::Perform
-------------------------------------------
Need a working installation of Informix.

Downloads
---------
All downloads are from http://search.cpan.org/CPAN/authors/id/

Curses		G/GI/GIRAFFED/Curses-1.15.tgz
CursesWidgets	C/CO/CORLISS/CursesWidgets-1.997.tar.gz
CursesForms	C/CO/CORLISS/CursesForms-1.997.tar.gz
CursesApplication	C/CO/CORLISS/CursesApplication-0.2.tar.gz
ExtUtils-AutoInstall	A/AU/AUTRIJUS/ExtUtils-AutoInstall-0.63.tar.gz
Pod-Escapes	S/SB/SBURKE/Pod-Escapes-1.04.tar.gz
Pod-Simple	A/AR/ARANDAL/Pod-Simple-3.05.tar.gz
Test-Simple	M/MS/MSCHWERN/Test-Simple-0.70.tar.gz
Test-Pod	P/PE/PETDANCE/Test-Pod-1.26.tar.gz
DBI		T/TI/TIMB/DBI-1.56.tar.gz 
DBD		J/JO/JOHNL/DBD-Informix-2007.0226.tar.gz
YAML		I/IN/INGY/YAML-0.62.tar.gz
ParseRecDescent		D/DC/DCONWAY/Parse-RecDescent-1.94.tar.gz

Extras needed for HPUX:
Scalar-Utils	G/GB/GBARR/Scalar-List-Utils-1.19.tar.gz
Test-Harness	P/PE/PETDANCE/Test-Harness-2.64.tar.gz

Optional:
Sort-Versions	E/ED/EDAVIS/Sort-Versions-1.5.tar.gz

Commands in gory detail
-----------------------

# cd /usr/include
# rm curses.h ncurses.h form.h menu.h panel.h

$ tar xzf Curses-1.15.tar.gz
$ cd Curses-1.15
$ perl Makefile.PL PANELS MENUS FORMS
$ make
$ sudo make install
$ cd ..

$ tar xzf CursesWidgets-1.997.tar.gz
$ cd CursesWidgets-1.997
$ perl Makefile.PL
$ make
$ sudo make install
$ cd ..


$ tar xzf CursesForms-1.997.tar.gz
$ cd CursesForms-1.997
$ perl Makefile.PL
$ make
$ sudo make install
$ cd ..

$ tar xzf CursesApplication-0.2.tar.gz
$ cd CursesApplication-0.2
$ perl Makefile.PL
$ make
$ sudo make install
$ cd ..

$ tar xzf DBI-1.56.tar.gz 
$ cd DBI-1.56
$ perl Makefile.PL
$ make
$ sudo make install
$ cd ..

$ tar xzf ExtUtils-AutoInstall-0.63.tar.gz
$ cd ExtUtils-AutoInstall-0.63
$ perl Makefile.PL; make
$ sudo make install
$ cd ..

$ tar xzf Pod-Escapes-1.04.tar.gz
$ cd Pod-Escapes-1.04
$ perl Makefile.PL
$ make
$ sudo make install
$ cd ..

$ tar xzf Pod-Simple-3.05.tar.gz
$ cd Pod-Simple-3.05
$ perl Makefile.PL
$ make
$ sudo make install
$ cd ..

$ tar xzf Test-Simple-0.70.tar.gz
$ cd Test-Simple-0.70
$ perl Makefile.PL
$ make
$ sudo make install
$ cd ..

$ tar xzf Test-Pod-1.26.tar.gz
$ cd Test-Pod-1.26
$ perl Makefile.PL
$ make
$ sudo make install
$ cd ..

$ dbaccess
Password:
DBACCESS:   Database
DATABASE:   Create
CREATE DATABASE >>stores
CREATE DATABASE:  Exit
EXIT:   Create-new-database

$ tar xzf DBD-Informix-2007.0226.tar.gz
$ cd DBD-Informix-2007.0226
$ perl Makefile.PL
$ make
$ sudo make install

$ tar xzf YAML-0.62.tar.gz
$ cd YAML-0.62
$ perl Makefile.pl
$ make
$ sudo make install
$ cd ..

$ tar xzf Parse-RecDescent-1.94.tar.gz
$ cd Parse-RecDescent-1.94
$ perl Makefile.pl
$ make
$ sudo make install
$ cd ..


$ tar xjf DBIx-Perform-0.691.tar.bz2
$ cd DBIx-Perform-0.691.tar.bz2
$ perl Makefile.pl
$ make
$ sudo make install
$ cd ..


------------------------------------------------------------------------
HP-UX installation (incomplete)

HP-UX by default had only a very basic curses.  It didn't come with gcc.
After installing gcc and ncurses in /usr/local, some differences:

# cd /usr/include
# rm curses.h ncurses.h form.h menu.h panel.h

$ export PATH=/usr/local/bin:$PATH
$ export CURSES_CFLAGS=-I/usr/local/include/ncurses
$ export CURSES_LDFLAGS=-L/usr/local/lib

$ gzip -d < Curses-1.15.tar.gz | tar xf -
$ cd Curses-1.15
$ perl Makefile.PL PANELS MENUS FORMS
$ make
# make install
$ cd ..

$ gzip -d < Scalar-List-Utils.tar.gz | tar xf -
$ cd Scalar-List-Utils
$ perl Makefile.PL
edit line 282 of Makefile, changing
  XSUBPPARGS +=  -typemap mytypemap
to
  XSUBPPARGS = $(XSUBPPARGS) -typemap mytypemap
$ make
# make install
$ cd ..

Need Test-Harness before Test-Simple.
Need Test-Simple before DBI.

$ gzip -d < DBI-1.56.tar.gz | tar xf -
$ cd DBI-1.56
$ perl Makefile.PL
$ make
$ make
# make install
$ cd ..

Here is another difficulty.  If the Informix binaries were compiled
with cc, not gcc, then will have to change some things.

$ tar xzf DBD-Informix-2007.0226.tar.gz
$ cd DBD-Informix-2007.0226
$ perl Makefile.PL
$ make
$ sudo make install

I have not yet managed to get DBD-Informix to install in HPUX 11.11 with
Informix 7.2.

=========================================================================
"make test" has not been updated, and will likely print many errors.

=========================================================================

USAGE
"make install" copies scripts "pformbld" and "perform" to /usr/local/bin.
To run a Perform script "example.per", 1st have appropriate environment
variables set for the database.  If the environment is not set may get an
error message similar to:

install_driver(PG) failed: Can't locate DBD/PG.pm in @INC ...


Here is an example of the environment variables needed for Informix 7.2:
$ export DB_HOST=$(hostname)
$ export DBPATH=/usr/informix
$ export DB_NAME=mydatabase
$ export DB_CLASS=Informix
$ export DB_USER=informix
$ export DB_PASSWORD=mydbpasswd
$ export DBD_INFORMIX_USERNAME=informix
$ export DBD_INFORMIX_PASSWORD=$DB_PASSWORD
$ export DBD_INFORMIX_PASSWORD2=$DB_PASSWORD
$ export DBD_INFORMIX_USERNAME2=informix

Might also need to set the terminal:
$ export TERM=vt100

And these are optional (either blue or black give good results):
$ export BGCOLOR=blue
$ export FIELDBGCOLOR=blue


The 2nd step need only be done once.  Create "example.yml" with:

$ pformbld example.per


3rd, run the script with:

$ perform example


Lastly, if the script calls external C functions, will need to build
a C executable.  For details, read the comments at the head of 
Perform/src/perl_perform_tools.c.  Once a source file "cfuncs.ec" with
the external functions is compiled to an executable "cfuncs", the
Perform script can be run with those functions with an extra parameter:

$ perform example cfuncs

=========================================================================

Known problems
==============

problems
--------

The Table button does not change screens.  This is, of course, only
relevant on scripts that have 2+ screens and 2+ tables.  It's not always
clear why sperform chooses a particular screen.  Going to the first screen
that has a field that is associated with the newly focused table results
in picking the same screen as sperform in most cases but not all.  In
the case that differed, the script has a field on the first screen
that joins the 2 tables in question, then the rest of the fields on that
screen are associated with the 1st table.  The first field associated with
only the 2nd table is on the 2nd screen.  There is also an instruction that,
upon an attempt to manipulate the 2nd table, moves the focus to a field on
the 2nd screen.  And lastly, the field on the first screen that joins the
2 tables is duplicated on the 2nd screen.
So there are at least 3 alternatives that would result
in landing on the 2nd screen-- go to the first screen containing a field
associated with only the 2nd table, or go to the screen that contains the
first field entered when the user tries to manipulate the 2nd table, or
go to the first screen that contains a field associated with the
2nd table that is not duplicated on all previous screens.

On scripts that have "forests", (meaning, 2 or more groups of tables which
are not joined to one another in any of the field associations), and which
lookup data from the same tables, there can be "spillover".  That is,
suppose there are 3 tables t1, t2, and t3.  t1 and t2 are not joined,
but both t1 and t2 "lookup" data from t3.  Then if the user does a query on
t1, data for fields associated with looking up t3 when joined to t1 may be
displayed in both fields that join t1 and t3 in a lookup, and fields that join
t2 and t3 in a lookup.

Joins aren't always looked up.  (May only be composite joins, not sure.)
Lookups are done whenever the user enters data in an associated field.
That is, suppose there are tables, t1 and t2, with various columns, and
2 fields f1 and f2.  Take the following:
f1 = t1.c1 lookup f2 = t2.c2 joining t1.c1 = t2.c1
When the user enters a value in f1, the program checks the join for a
value from t2.c1 that matches the user's newly entered value for t1.c1 and
if found, "looks up" t2.c2 from the same row where the matching t2.c1 was
found and fills in f2 with the value from t2.c2.  This part works.
A composite join is merely a join between more than one column of 2 tables.
It seems the program is also supposed to fill in values on
composite joins that are not lookups, as in this:
f1 = t1.c1 = t2.c1;
f2 = t1.c2 = t2.c2;
f3 = t2.c3
When the user enters data in f1 and f2, the program should fill in f3,
but does not.

Concurrency checks.  Seems the original utility at times checks the
data it retrieves to make sure it hasn't been changed by anything else,
such as another invocation of the utility operating on the same tables.
Hard to know when these checks are made, but is more often than upon
trying to do Update or Add.  Checking is also done when the user tries
Next or Previous.  Currently, no checking is done.  Presumably the
database will catch all such problems, but this should be tested more.

minor problems
--------------
ctrl-c breaks out of application if user has not yet done anything.
sperform only beeps.  q, ctrl-c, ctrl-c behaves correctly.

After a big slow query, the next query is slow.  After fetching something
like 100,000 rows, the next query will be as slow even if it only fetches
1000 rows.  If instead, only the smaller query is run, it will be fast.
If the 1st query is run and then the 2nd query is run twice, the 2nd
time on the 2nd query will be fast.

Comments are converted to uppercase.

The processing of a .per file to an intermediate form is extremely slow.
Can take more than 1 minute.  Originally, DBIx:Perform did not "compile"
to an intermediate form, but operated directly from a given .per file.
sperform has a "compiler" called sformbld, which "compiles" a .per file
to a .frm file.  sperform itself actually runs from a given .frm file.
Since sperform made this intermediate step, the easiest workaround was
to do something similar in DBIx::Perform.
The script "pformbld" processes a .per file and writes out the results to
a much larger .yml file, taking a long time to do that part.
DBIx::Perform loads its data from the .yml file, taking up to 2 seconds
to start.

trivial problems
----------------
Different behavior if wildcards are put in a "serial only" field for
a query.  sperform gives "Error in field" and stays in the field.
DBIx::Perform tries to run the query, gets and reports a DB error,
and returns to the main menu.

Also, may have different behavior on fields with the "picture" attribute.

Reverse color fields on any screen but the first aren't always displayed
reversed.  Depends on the TERM environment variable.  (And yet the reverse
coloring always works on the first screen?)

On the main menu, up and down arrow keys should go to the first menu item
on the previous and next menu row respectively.  DBIx::Perform does nothing.

When running under another user acct, somehow Perl was including my
sandbox in its libraries path, @INC.  Worked around this by removing
all group and world permission to that directory of mine.  Think it's not
a problem with DBIx::Perform, but with the environment.

